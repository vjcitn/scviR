{
  "input": {
    "btnSend": 0,
    "curmod": "scanpy",
    "lev2": "calculate_qc_metrics",
    "topmods": "pp"
  },
  "output": {
    "pickedmodule": {
      "html": "<div id=\"lev2\" class=\"form-group shiny-input-radiogroup shiny-input-container shiny-input-container-inline\" role=\"radiogroup\" aria-labelledby=\"lev2-label\">\n  <label class=\"control-label\" id=\"lev2-label\" for=\"lev2\">subtop<\/label>\n  <div class=\"shiny-options-group\">\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"calculate_qc_metrics\" checked=\"checked\"/>\n      <span>calculate_qc_metrics<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"combat\"/>\n      <span>combat<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"downsample_counts\"/>\n      <span>downsample_counts<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"filter_cells\"/>\n      <span>filter_cells<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"filter_genes\"/>\n      <span>filter_genes<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"filter_genes_dispersion\"/>\n      <span>filter_genes_dispersion<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"highly_variable_genes\"/>\n      <span>highly_variable_genes<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"log1p\"/>\n      <span>log1p<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"neighbors\"/>\n      <span>neighbors<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"normalize_per_cell\"/>\n      <span>normalize_per_cell<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"normalize_total\"/>\n      <span>normalize_total<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"pca\"/>\n      <span>pca<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"recipe_seurat\"/>\n      <span>recipe_seurat<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"recipe_weinreb17\"/>\n      <span>recipe_weinreb17<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"recipe_zheng17\"/>\n      <span>recipe_zheng17<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"regress_out\"/>\n      <span>regress_out<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"scale\"/>\n      <span>scale<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"sqrt\"/>\n      <span>sqrt<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"subsample\"/>\n      <span>subsample<\/span>\n    <\/label>\n  <\/div>\n<\/div>",
      "deps": [

      ]
    },
    "subtext": "Help on function calculate_qc_metrics in module scanpy.preprocessing._qc:<br><br>calculate_qc_metrics(adata: anndata._core.anndata.AnnData, *, expr_type: str = 'counts', var_type: str = 'genes', qc_vars: Collection[str] = (), percent_top: Union[Collection[int], NoneType] = (50, 100, 200, 500), layer: Union[str, NoneType] = None, use_raw: bool = False, inplace: bool = False, log1p: bool = True, parallel: Union[bool, NoneType] = None) -> Union[Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame], NoneType]<br>    Calculate quality control metrics.<br>    <br>    Calculates a number of qc metrics for an AnnData object, see section<br>    `Returns` for specifics. Largely based on `calculateQCMetrics` from scater<br>    [McCarthy17]_. Currently is most efficient on a sparse CSR or dense matrix.<br>    <br>    Note that this method can take a while to compile on the first call. That<br>    result is then cached to disk to be used later.<br>    <br>    Parameters<br>    ----------<br>    adata<br>        Annotated data matrix.<br>    expr_type<br>        Name of kind of values in X.<br>    var_type<br>        The kind of thing the variables are.<br>    qc_vars<br>        Keys for boolean columns of `.var` which identify variables you could<br>        want to control for (e.g. \"ERCC\" or \"mito\").<br>    percent_top<br>        Which proportions of top genes to cover. If empty or `None` don't<br>        calculate. Values are considered 1-indexed, `percent_top=[50]` finds<br>        cumulative proportion to the 50th most expressed gene.<br>    layer<br>        If provided, use `adata.layers[layer]` for expression values instead<br>        of `adata.X`.<br>    use_raw<br>        If True, use `adata.raw.X` for expression values instead of `adata.X`.<br>    inplace<br>        Whether to place calculated metrics in `adata`'s `.obs` and `.var`.<br>    log1p<br>        Set to `False` to skip computing `log1p` transformed annotations.<br>    <br>    Returns<br>    -------<br>    Depending on `inplace` returns calculated metrics<br>    (as :class:`~pandas.DataFrame`) or updates `adata`'s `obs` and `var`.<br>    <br>    Observation level metrics include:<br>    <br>    `total_{var_type}_by_{expr_type}`<br>        E.g. \"total_genes_by_counts\". Number of genes with positive counts in a cell.<br>    `total_{expr_type}`<br>        E.g. \"total_counts\". Total number of counts for a cell.<br>    `pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`<br>        E.g. \"pct_counts_in_top_50_genes\". Cumulative percentage of counts<br>        for 50 most expressed genes in a cell.<br>    `total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`<br>        E.g. \"total_counts_mito\". Total number of counts for variabes in<br>        `qc_vars`.<br>    `pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`<br>        E.g. \"pct_counts_mito\". Proportion of total counts for a cell which<br>        are mitochondrial.<br>    <br>    Variable level metrics include:<br>    <br>    `total_{expr_type}`<br>        E.g. \"total_counts\". Sum of counts for a gene.<br>    `n_genes_by_{expr_type}`<br>        E.g. \"n_genes_by_counts\". The number of genes with at least 1 count in a cell. Calculated for all cells.<br>    `mean_{expr_type}`<br>        E.g. \"mean_counts\". Mean expression over all cells.<br>    `n_cells_by_{expr_type}`<br>        E.g. \"n_cells_by_counts\". Number of cells this expression is<br>        measured in.<br>    `pct_dropout_by_{expr_type}`<br>        E.g. \"pct_dropout_by_counts\". Percentage of cells this feature does<br>        not appear in.<br>    <br>    Example<br>    -------<br>    Calculate qc metrics for visualization.<br>    <br>    .. plot::<br>        :context: close-figs<br>    <br>        import scanpy as sc<br>        import seaborn as sns<br>    <br>        pbmc = sc.datasets.pbmc3k()<br>        pbmc.var[\"mito\"] = pbmc.var_names.str.startswith(\"MT-\")<br>        sc.pp.calculate_qc_metrics(pbmc, qc_vars=[\"mito\"], inplace=True)<br>        sns.jointplot(<br>            data=pbmc.obs,<br>            x=\"log1p_total_counts\",<br>            y=\"log1p_n_genes_by_counts\",<br>            kind=\"hex\",<br>        )<br>    <br>    .. plot::<br>        :context: close-figs<br>    <br>        sns.histplot(pbmc.obs[\"pct_counts_mito\"])<br><br><br>",
    "topmodules": {
      "html": "<div id=\"topmods\" class=\"form-group shiny-input-radiogroup shiny-input-container\" role=\"radiogroup\" aria-labelledby=\"topmods-label\">\n  <label class=\"control-label\" id=\"topmods-label\" for=\"topmods\">modules<\/label>\n  <div class=\"shiny-options-group\">\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"datasets\" checked=\"checked\"/>\n        <span>datasets<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"experimental\"/>\n        <span>experimental<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"external\"/>\n        <span>external<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"get\"/>\n        <span>get<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"logging\"/>\n        <span>logging<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"metrics\"/>\n        <span>metrics<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"neighbors\"/>\n        <span>neighbors<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"pl\"/>\n        <span>pl<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"plotting\"/>\n        <span>plotting<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"pp\"/>\n        <span>pp<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"preprocessing\"/>\n        <span>preprocessing<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"queries\"/>\n        <span>queries<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"readwrite\"/>\n        <span>readwrite<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"tl\"/>\n        <span>tl<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"tools\"/>\n        <span>tools<\/span>\n      <\/label>\n    <\/div>\n  <\/div>\n<\/div>",
      "deps": [

      ]
    }
  },
  "export": {

  }
}
