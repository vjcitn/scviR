{
  "input": {
    "btnSend": 0,
    "curmod": "scvi",
    "lev2": "AmortizedLDA",
    "topmods": "model"
  },
  "output": {
    "pickedmodule": {
      "html": "<div id=\"lev2\" class=\"form-group shiny-input-radiogroup shiny-input-container shiny-input-container-inline\" role=\"radiogroup\" aria-labelledby=\"lev2-label\">\n  <label class=\"control-label\" id=\"lev2-label\" for=\"lev2\">subtop<\/label>\n  <div class=\"shiny-options-group\">\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"AmortizedLDA\" checked=\"checked\"/>\n      <span>AmortizedLDA<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"AUTOZI\"/>\n      <span>AUTOZI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"base\"/>\n      <span>base<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"CondSCVI\"/>\n      <span>CondSCVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"DestVI\"/>\n      <span>DestVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"JaxSCVI\"/>\n      <span>JaxSCVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"LinearSCVI\"/>\n      <span>LinearSCVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"MULTIVI\"/>\n      <span>MULTIVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"PEAKVI\"/>\n      <span>PEAKVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"SCANVI\"/>\n      <span>SCANVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"SCVI\"/>\n      <span>SCVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"TOTALVI\"/>\n      <span>TOTALVI<\/span>\n    <\/label>\n    <label class=\"radio-inline\">\n      <input type=\"radio\" name=\"lev2\" value=\"utils\"/>\n      <span>utils<\/span>\n    <\/label>\n  <\/div>\n<\/div>",
      "deps": [

      ]
    },
    "subtext": "Help on class AmortizedLDA in module scvi.model._amortizedlda:<br><br>class AmortizedLDA(scvi.model.base._pyromixin.PyroSviTrainMixin, scvi.model.base._base_model.BaseModelClass)<br> |  AmortizedLDA(adata: anndata._core.anndata.AnnData, n_topics: int = 20, n_hidden: int = 128, cell_topic_prior: Union[float, Sequence[float], NoneType] = None, topic_feature_prior: Union[float, Sequence[float], NoneType] = None)<br> |  <br> |  Amortized Latent Dirichlet Allocation :cite:p:`Blei03`.<br> |  <br> |  Parameters<br> |  ----------<br> |  adata<br> |      AnnData object that has been registered via :meth:`~scvi.model.AmortizedLDA.setup_anndata`.<br> |  n_topics<br> |      Number of topics to model.<br> |  n_hidden<br> |      Number of nodes in the hidden layer of the encoder.<br> |  cell_topic_prior<br> |      Prior of cell topic distribution. If `None`, defaults to `1 / n_topics`.<br> |  topic_feature_prior<br> |      Prior of topic feature distribution. If `None`, defaults to `1 / n_topics`.<br> |  <br> |  Examples<br> |  --------<br> |  >>> adata = anndata.read_h5ad(path_to_anndata)<br> |  >>> scvi.model.AmortizedLDA.setup_anndata(adata)<br> |  >>> model = scvi.model.AmortizedLDA(adata)<br> |  >>> model.train()<br> |  >>> feature_by_topic = model.get_feature_by_topic()<br> |  >>> adata.obsm[\"X_LDA\"] = model.get_latent_representation()<br> |  <br> |  Method resolution order:<br> |      AmortizedLDA<br> |      scvi.model.base._pyromixin.PyroSviTrainMixin<br> |      scvi.model.base._base_model.BaseModelClass<br> |      scvi.autotune._types.TunableMixin<br> |      builtins.object<br> |  <br> |  Methods defined here:<br> |  <br> |  __init__(self, adata: anndata._core.anndata.AnnData, n_topics: int = 20, n_hidden: int = 128, cell_topic_prior: Union[float, Sequence[float], NoneType] = None, topic_feature_prior: Union[float, Sequence[float], NoneType] = None)<br> |      Initialize self.  See help(type(self)) for accurate signature.<br> |  <br> |  get_elbo(self, adata: Union[anndata._core.anndata.AnnData, NoneType] = None, indices: Union[Sequence[int], NoneType] = None, batch_size: Union[int, NoneType] = None) -> float<br> |      Return the ELBO for the data.<br> |      <br> |      The ELBO is a lower bound on the log likelihood of the data used for optimization<br> |      of VAEs. Note, this is not the negative ELBO, higher is better.<br> |      <br> |      Parameters<br> |      ----------<br> |      adata<br> |          AnnData object with equivalent structure to initial AnnData. If `None`, defaults to the<br> |          AnnData object used to initialize the model.<br> |      indices<br> |          Indices of cells in adata to use. If `None`, all cells are used.<br> |      batch_size<br> |          Minibatch size for data loading into model. Defaults to `scvi.settings.batch_size`.<br> |      <br> |      Returns<br> |      -------<br> |      The positive ELBO.<br> |  <br> |  get_feature_by_topic(self, n_samples=5000) -> pandas.core.frame.DataFrame<br> |      Gets a Monte-Carlo estimate of the expectation of the feature by topic matrix.<br> |      <br> |      Parameters<br> |      ----------<br> |      adata<br> |          AnnData to transform. If None, returns the feature by topic matrix for<br> |          the source AnnData.<br> |      n_samples<br> |          Number of samples to take for the Monte-Carlo estimate of the mean.<br> |      <br> |      Returns<br> |      -------<br> |      A `n_var x n_topics` Pandas DataFrame containing the feature by topic matrix.<br> |  <br> |  get_latent_representation(self, adata: Union[anndata._core.anndata.AnnData, NoneType] = None, indices: Union[Sequence[int], NoneType] = None, batch_size: Union[int, NoneType] = None, n_samples: int = 5000) -> pandas.core.frame.DataFrame<br> |      Converts a count matrix to an inferred topic distribution.<br> |      <br> |      Parameters<br> |      ----------<br> |      adata<br> |          AnnData object with equivalent structure to initial AnnData. If `None`, defaults to the<br> |          AnnData object used to initialize the model.<br> |      indices<br> |          Indices of cells in adata to use. If `None`, all cells are used.<br> |      batch_size<br> |          Minibatch size for data loading into model. Defaults to `scvi.settings.batch_size`.<br> |      n_samples<br> |          Number of samples to take for the Monte-Carlo estimate of the mean.<br> |      <br> |      Returns<br> |      -------<br> |      A `n_obs x n_topics` Pandas DataFrame containing the normalized estimate<br> |      of the topic distribution for each observation.<br> |  <br> |  get_perplexity(self, adata: Union[anndata._core.anndata.AnnData, NoneType] = None, indices: Union[Sequence[int], NoneType] = None, batch_size: Union[int, NoneType] = None) -> float<br> |      Computes approximate perplexity for `adata`.<br> |      <br> |      Perplexity is defined as exp(-1 * log-likelihood per count).<br> |      <br> |      Parameters<br> |      ----------<br> |      adata<br> |          AnnData object with equivalent structure to initial AnnData. If `None`, defaults to the<br> |          AnnData object used to initialize the model.<br> |      indices<br> |          Indices of cells in adata to use. If `None`, all cells are used.<br> |      batch_size<br> |          Minibatch size for data loading into model. Defaults to `scvi.settings.batch_size`.<br> |      <br> |      Returns<br> |      -------<br> |      Perplexity.<br> |  <br> |  ----------------------------------------------------------------------<br> |  Class methods defined here:<br> |  <br> |  setup_anndata(adata: anndata._core.anndata.AnnData, layer: Union[str, NoneType] = None, **kwargs) -> Union[anndata._core.anndata.AnnData, NoneType] from scvi.model.base._base_model.BaseModelMetaClass<br> |      Sets up the :class:`~anndata.AnnData` object for this model.<br> |      <br> |      A mapping will be created between data fields used by this model to their respective locations in adata.<br> |      None of the data in adata are modified. Only adds fields to adata.<br> |      <br> |      Parameters<br> |      ----------<br> |      adata<br> |          AnnData object. Rows represent cells, columns represent features.<br> |      layer<br> |          if not `None`, uses this as the key in `adata.layers` for raw count data.<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data and other attributes defined here:<br> |  <br> |  __abstractmethods__ = frozenset()<br> |  <br> |  ----------------------------------------------------------------------<br> |  Methods inherited from scvi.model.base._pyromixin.PyroSviTrainMixin:<br> |  <br> |  train(self, max_epochs: Union[int, NoneType] = None, use_gpu: Union[str, int, bool, NoneType] = None, train_size: float = 0.9, validation_size: Union[float, NoneType] = None, batch_size: int = 128, early_stopping: bool = False, lr: Union[float, NoneType] = None, training_plan: scvi.train._trainingplans.PyroTrainingPlan = <class 'scvi.train._trainingplans.PyroTrainingPlan'>, plan_kwargs: Union[dict, NoneType] = None, **trainer_kwargs)<br> |      Train the model.<br> |      <br> |      Parameters<br> |      ----------<br> |      max_epochs<br> |          Number of passes through the dataset. If `None`, defaults to<br> |          `np.min([round((20000 / n_cells) * 400), 400])`<br> |      use_gpu<br> |          Use default GPU if available (if None or True), or index of GPU to use (if int),<br> |          or name of GPU (if str, e.g., `'cuda:0'`), or use CPU (if False).<br> |      train_size<br> |          Size of training set in the range [0.0, 1.0].<br> |      validation_size<br> |          Size of the test set. If `None`, defaults to 1 - `train_size`. If<br> |          `train_size + validation_size < 1`, the remaining cells belong to a test set.<br> |      batch_size<br> |          Minibatch size to use during training. If `None`, no minibatching occurs and all<br> |          data is copied to device (e.g., GPU).<br> |      early_stopping<br> |          Perform early stopping. Additional arguments can be passed in `**kwargs`.<br> |          See :class:`~scvi.train.Trainer` for further options.<br> |      lr<br> |          Optimiser learning rate (default optimiser is :class:`~pyro.optim.ClippedAdam`).<br> |          Specifying optimiser via plan_kwargs overrides this choice of lr.<br> |      training_plan<br> |          Training plan :class:`~scvi.train.PyroTrainingPlan`.<br> |      plan_kwargs<br> |          Keyword args for :class:`~scvi.train.PyroTrainingPlan`. Keyword arguments passed to<br> |          `train()` will overwrite values present in `plan_kwargs`, when appropriate.<br> |      **trainer_kwargs<br> |          Other keyword args for :class:`~scvi.train.Trainer`.<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data descriptors inherited from scvi.model.base._pyromixin.PyroSviTrainMixin:<br> |  <br> |  __dict__<br> |      dictionary for instance variables (if defined)<br> |  <br> |  __weakref__<br> |      list of weak references to the object (if defined)<br> |  <br> |  ----------------------------------------------------------------------<br> |  Methods inherited from scvi.model.base._base_model.BaseModelClass:<br> |  <br> |  __repr__(self)<br> |      Return repr(self).<br> |  <br> |  get_anndata_manager(self, adata: Union[anndata._core.anndata.AnnData, mudata._core.mudata.MuData], required: bool = False) -> Union[scvi.data._manager.AnnDataManager, NoneType]<br> |      Retrieves the :class:`~scvi.data.AnnDataManager` for a given AnnData object specific to this model instance.<br> |      <br> |      Requires ``self.id`` has been set. Checks for an :class:`~scvi.data.AnnDataManager`<br> |      specific to this model instance.<br> |      <br> |      Parameters<br> |      ----------<br> |      adata<br> |          AnnData object to find manager instance for.<br> |      required<br> |          If True, errors on missing manager. Otherwise, returns None when manager is missing.<br> |  <br> |  get_from_registry(self, adata: Union[anndata._core.anndata.AnnData, mudata._core.mudata.MuData], registry_key: str) -> numpy.ndarray<br> |      Returns the object in AnnData associated with the key in the data registry.<br> |      <br> |      AnnData object should be registered with the model prior to calling this function<br> |      via the ``self._validate_anndata`` method.<br> |      <br> |      Parameters<br> |      ----------<br> |      registry_key<br> |          key of object to get from data registry.<br> |      adata<br> |          AnnData to pull data from.<br> |      <br> |      Returns<br> |      -------<br> |      The requested data as a NumPy array.<br> |  <br> |  save(self, dir_path: str, prefix: Union[str, NoneType] = None, overwrite: bool = False, save_anndata: bool = False, **anndata_write_kwargs)<br> |      Save the state of the model.<br> |      <br> |      Neither the trainer optimizer state nor the trainer history are saved.<br> |      Model files are not expected to be reproducibly saved and loaded across versions<br> |      until we reach version 1.0.<br> |      <br> |      Parameters<br> |      ----------<br> |      dir_path<br> |          Path to a directory.<br> |      prefix<br> |          Prefix to prepend to saved file names.<br> |      overwrite<br> |          Overwrite existing data or not. If `False` and directory<br> |          already exists at `dir_path`, error will be raised.<br> |      save_anndata<br> |          If True, also saves the anndata<br> |      anndata_write_kwargs<br> |          Kwargs for :meth:`~anndata.AnnData.write`<br> |  <br> |  to_device(self, device: Union[str, int])<br> |      Move model to device.<br> |      <br> |      Parameters<br> |      ----------<br> |      device<br> |          Device to move model to. Options: 'cpu' for CPU, integer GPU index (eg. 0),<br> |          or 'cuda:X' where X is the GPU index (eg. 'cuda:0'). See torch.device for more info.<br> |      <br> |      Examples<br> |      --------<br> |      >>> adata = scvi.data.synthetic_iid()<br> |      >>> model = scvi.model.SCVI(adata)<br> |      >>> model.to_device('cpu')      # moves model to CPU<br> |      >>> model.to_device('cuda:0')   # moves model to GPU 0<br> |      >>> model.to_device(0)          # also moves model to GPU 0<br> |  <br> |  view_anndata_setup(self, adata: Union[anndata._core.anndata.AnnData, mudata._core.mudata.MuData, NoneType] = None, hide_state_registries: bool = False) -> None<br> |      Print summary of the setup for the initial AnnData or a given AnnData object.<br> |      <br> |      Parameters<br> |      ----------<br> |      adata<br> |          AnnData object setup with ``setup_anndata`` or<br> |          :meth:`~scvi.data.AnnDataManager.transfer_fields`.<br> |      hide_state_registries<br> |          If True, prints a shortened summary without details of each state registry.<br> |  <br> |  ----------------------------------------------------------------------<br> |  Class methods inherited from scvi.model.base._base_model.BaseModelClass:<br> |  <br> |  convert_legacy_save(dir_path: str, output_dir_path: str, overwrite: bool = False, prefix: Union[str, NoneType] = None) -> None from scvi.model.base._base_model.BaseModelMetaClass<br> |      Converts a legacy saved model (<v0.15.0) to the updated save format.<br> |      <br> |      Parameters<br> |      ----------<br> |      dir_path<br> |          Path to directory where legacy model is saved.<br> |      output_dir_path<br> |          Path to save converted save files.<br> |      overwrite<br> |          Overwrite existing data or not. If ``False`` and directory<br> |          already exists at ``output_dir_path``, error will be raised.<br> |      prefix<br> |          Prefix of saved file names.<br> |  <br> |  load(dir_path: str, adata: Union[anndata._core.anndata.AnnData, mudata._core.mudata.MuData, NoneType] = None, use_gpu: Union[str, int, bool, NoneType] = None, prefix: Union[str, NoneType] = None, backup_url: Union[str, NoneType] = None) from scvi.model.base._base_model.BaseModelMetaClass<br> |      Instantiate a model from the saved output.<br> |      <br> |      Parameters<br> |      ----------<br> |      dir_path<br> |          Path to saved outputs.<br> |      adata<br> |          AnnData organized in the same way as data used to train model.<br> |          It is not necessary to run setup_anndata,<br> |          as AnnData is validated against the saved `scvi` setup dictionary.<br> |          If None, will check for and load anndata saved with the model.<br> |      use_gpu<br> |          Load model on default GPU if available (if None or True),<br> |          or index of GPU to use (if int), or name of GPU (if str), or use CPU (if False).<br> |      prefix<br> |          Prefix of saved file names.<br> |      backup_url<br> |          URL to retrieve saved outputs from if not present on disk.<br> |      <br> |      Returns<br> |      -------<br> |      Model with loaded state dictionaries.<br> |      <br> |      Examples<br> |      --------<br> |      >>> model = ModelClass.load(save_path, adata) # use the name of the model class used to save<br> |      >>> model.get_....<br> |  <br> |  register_manager(adata_manager: scvi.data._manager.AnnDataManager) from scvi.model.base._base_model.BaseModelMetaClass<br> |      Registers an :class:`~scvi.data.AnnDataManager` instance with this model class.<br> |      <br> |      Stores the :class:`~scvi.data.AnnDataManager` reference in a class-specific manager store.<br> |      Intended for use in the ``setup_anndata()`` class method followed up by retrieval of the<br> |      :class:`~scvi.data.AnnDataManager` via the ``_get_most_recent_anndata_manager()`` method in<br> |      the model init method.<br> |      <br> |      Notes<br> |      -----<br> |      Subsequent calls to this method with an :class:`~scvi.data.AnnDataManager` instance referring to the same<br> |      underlying AnnData object will overwrite the reference to previous :class:`~scvi.data.AnnDataManager`.<br> |  <br> |  ----------------------------------------------------------------------<br> |  Static methods inherited from scvi.model.base._base_model.BaseModelClass:<br> |  <br> |  load_registry(dir_path: str, prefix: Union[str, NoneType] = None) -> dict<br> |      Return the full registry saved with the model.<br> |      <br> |      Parameters<br> |      ----------<br> |      dir_path<br> |          Path to saved outputs.<br> |      prefix<br> |          Prefix of saved file names.<br> |      <br> |      Returns<br> |      -------<br> |      The full registry saved with the model<br> |  <br> |  view_setup_args(dir_path: str, prefix: Union[str, NoneType] = None) -> None<br> |      Print args used to setup a saved model.<br> |      <br> |      Parameters<br> |      ----------<br> |      dir_path<br> |          Path to saved outputs.<br> |      prefix<br> |          Prefix of saved file names.<br> |  <br> |  ----------------------------------------------------------------------<br> |  Readonly properties inherited from scvi.model.base._base_model.BaseModelClass:<br> |  <br> |  adata_manager<br> |      Manager instance associated with self.adata.<br> |  <br> |  device<br> |      The current device that the module's params are on.<br> |  <br> |  history<br> |      Returns computed metrics during training.<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data descriptors inherited from scvi.model.base._base_model.BaseModelClass:<br> |  <br> |  adata<br> |      Data attached to model instance.<br> |  <br> |  is_trained<br> |      Whether the model has been trained.<br> |  <br> |  test_indices<br> |      Observations that are in test set.<br> |  <br> |  train_indices<br> |      Observations that are in train set.<br> |  <br> |  validation_indices<br> |      Observations that are in validation set.<br><br><br>",
    "topmodules": {
      "html": "<div id=\"topmods\" class=\"form-group shiny-input-radiogroup shiny-input-container\" role=\"radiogroup\" aria-labelledby=\"topmods-label\">\n  <label class=\"control-label\" id=\"topmods-label\" for=\"topmods\">modules<\/label>\n  <div class=\"shiny-options-group\">\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"autotune\" checked=\"checked\"/>\n        <span>autotune<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"data\"/>\n        <span>data<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"dataloaders\"/>\n        <span>dataloaders<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"distributions\"/>\n        <span>distributions<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"external\"/>\n        <span>external<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"logging\"/>\n        <span>logging<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"model\"/>\n        <span>model<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"module\"/>\n        <span>module<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"nn\"/>\n        <span>nn<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"train\"/>\n        <span>train<\/span>\n      <\/label>\n    <\/div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"topmods\" value=\"utils\"/>\n        <span>utils<\/span>\n      <\/label>\n    <\/div>\n  <\/div>\n<\/div>",
      "deps": [

      ]
    }
  },
  "export": {

  }
}
